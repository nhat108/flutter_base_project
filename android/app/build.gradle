def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('keystore.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'
android {
    compileSdkVersion 31

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
  

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.minakomi"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }
    flavorDimensions "app"
    productFlavors {
        dev {
            dimension "app"
            applicationId "com.minakomi.dev"
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
            resValue "string", "branch_scheme", "xxx-app.link"
            resValue "string", "uri_scheme", "abc"
            resValue "string", "key_branch", "key_test_xxx"
            resValue "string", "test_mode", "true"
          
        }

        stage {
            dimension "app"
            applicationId "com.minakomi.stage"
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
            resValue "string", "branch_scheme", "xxx-app.link"
            resValue "string", "uri_scheme", "abc"
            resValue "string", "key_branch", "key_test_xxx"
            resValue "string", "test_mode", "true"
         
        }

        prod {
            dimension "app"
            applicationId "com.minakomi"
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
            resValue "string", "branch_scheme", "xxx.app.link"
            resValue "string", "uri_scheme", "abc"
            resValue "string", "key_branch", "key_live_xxx"
            resValue "string", "test_mode", "false"

        }
    }
     signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
       }
    }
    

    buildTypes {
      
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            minifyEnabled true
            useProguard true
            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            dependencies {
                //noinspection GradleCompatible
                implementation 'com.android.support:support-fragment:28.0.0'
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "baseapp-${variant.productFlavors[0].name}_v${variant.productFlavors[0].versionName}(${variant.productFlavors[0].versionCode}).apk"
        }
    }
    lintOptions {          
                                                                                      
     checkReleaseBuilds false                                                                                        
   } 
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation platform('com.google.firebase:firebase-bom:26.5.0')
    implementation 'com.google.firebase:firebase-messaging'
}
